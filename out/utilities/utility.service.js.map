{
  "version": 3,
  "sources": ["../../src/utilities/utility.service.ts"],
  "sourcesContent": ["import * as vscode from \"vscode\";\nimport EventEmitter = require('events');\n\nexport function getExtensionConfig(): vscode.WorkspaceConfiguration {\n    return vscode.workspace.getConfiguration('instructions-manager');\n}\n\n\n/**\n * Click history question event emitter.\n */\nconst clickHistoryQuestionEventEmitter = new EventEmitter();\nexport { clickHistoryQuestionEventEmitter }\n\n/**\n * Fire history question event.\n * @param historyQuestion :string \n*/\nexport function FireClickHistoryQuestionEvent(historyQuestion: string) {\n  clickHistoryQuestionEventEmitter.emit('clickHistoryQuestion', historyQuestion);\n}\n\n/**\n * Gets nonce\n * @returns string\n */\nexport function getNonce() {\n  let text = \"\";\n  const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n\n/**\n * Create a vscode.Uri as WebviewUri for source files.\n * @param webview :vscode.Weview\n * @param extensionUri :vscode.Uri\n * @param pathList :string[]\n * @returns vscode.Uri\n */\nexport function getAsWebviewUri(webview: vscode.Webview, extensionUri: vscode.Uri, pathList: string[]) {\n  return webview.asWebviewUri(vscode.Uri.joinPath(extensionUri, ...pathList));\n}\n\n/**\n * Create a vscode.Uri for source files.\n * @param extensionUri :vscode.Uri\n * @param pathList :strig[]\n * @returns vscode.Uri\n */\nexport function getVSCodeUri(extensionUri: vscode.Uri, pathList: string[]) {\n  return vscode.Uri.joinPath(extensionUri, ...pathList);\n}\n\n/**\n * Set storeData into context.globalState.\n * @param context :vscode.ExtensionContext\n * @param storeData : any\n */\nexport function setStoreData(context: vscode.ExtensionContext, storeData: any) {\n  const state = globalStateManager(context);\n\n  if (storeData !== undefined) {\n    state.write({\n      storeData: storeData\n    });\n  }\n}\n\nexport function setHistoryData(context: vscode.ExtensionContext, historyData: any) {\n  const state = globalStateManager(context);\n\n  if (historyData !== undefined) {\n    state.writeHistory({\n      historyData: historyData\n    });\n  }\n}\n\nexport function setChatData(context: vscode.ExtensionContext, chatData: any) {\n  const state = globalStateManager(context);\n\n  if (chatData !== undefined) {\n    state.writeChat({\n      chatData: chatData\n    });\n  }\n}\n\n/**\n * Gets storeData from context.globalState.\n * @param context :vscode.ExtensionContext\n * @returns string\n */\nexport function getStoreData(context: vscode.ExtensionContext): any {\n  const state = globalStateManager(context);\n\n  const { storeData } = state.read();\n  return storeData as any;\n}\n\nexport function getHistoryData(context: vscode.ExtensionContext): any {\n  const state = globalStateManager(context);\n\n  const { historyData } = state.readHistory();\n  return historyData as any;\n}\n\nexport function getChatData(context: vscode.ExtensionContext): any {\n  const state = globalStateManager(context);\n\n  const { chatData } = state.readChat();\n  return chatData as any;\n}\n\n/**\n* State Manager has read and write methods for api key. This methods set and get the api key from context.globalState.\n* @param context :vscode.ExtensionContext.\n* @returns void.\n*/\nexport function globalStateManager(context: vscode.ExtensionContext) {\n  return {\n    read,\n    write,\n    writeHistory,\n    readHistory,\n    writeChat,\n    readChat,\n  };\n\n  function read() {\n    return {\n      storeData: context.globalState.get('storeData')\n    };\n  }\n  \n  function readHistory() {\n    var historyData =  context.globalState.get('historyData')\n    if(historyData == undefined){\n      historyData = [];\n    }\n    return {\n      historyData\n    };\n  }\n\n  function readChat() {\n    var chatData =  context.globalState.get('chatData')\n    if(chatData == undefined){\n      chatData = [];\n    }\n    return {\n      chatData\n    };\n  }\n\n  function write(newState: any) {\n    context.globalState.update('storeData', newState.storeData);\n  }\n\n  function writeChat(newState: any) {\n    context.globalState.update('chatData', newState.chatData);\n  }\n\n  function writeHistory(newState: any) {\n    context.globalState.update('historyData', newState.historyData);\n  }\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AACxB,IAAO,eAAe,QAAQ;AAEvB,SAAS,qBAAoD;AAChE,SAAc,iBAAU,iBAAiB,sBAAsB;AACnE;AAMA,IAAM,mCAAmC,IAAI,aAAa;AAOnD,SAAS,8BAA8B,iBAAyB;AACrE,mCAAiC,KAAK,wBAAwB,eAAe;AAC/E;AAMO,SAAS,WAAW;AACzB,MAAI,OAAO;AACX,QAAM,WAAW;AACjB,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,YAAQ,SAAS,OAAO,KAAK,MAAM,KAAK,OAAO,IAAI,SAAS,MAAM,CAAC;AAAA,EACrE;AACA,SAAO;AACT;AASO,SAAS,gBAAgB,SAAyB,cAA0B,UAAoB;AACrG,SAAO,QAAQ,aAAoB,WAAI,SAAS,cAAc,GAAG,QAAQ,CAAC;AAC5E;AAQO,SAAS,aAAa,cAA0B,UAAoB;AACzE,SAAc,WAAI,SAAS,cAAc,GAAG,QAAQ;AACtD;AAOO,SAAS,aAAa,SAAkC,WAAgB;AAC7E,QAAM,QAAQ,mBAAmB,OAAO;AAExC,MAAI,cAAc,QAAW;AAC3B,UAAM,MAAM;AAAA,MACV;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEO,SAAS,eAAe,SAAkC,aAAkB;AACjF,QAAM,QAAQ,mBAAmB,OAAO;AAExC,MAAI,gBAAgB,QAAW;AAC7B,UAAM,aAAa;AAAA,MACjB;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEO,SAAS,YAAY,SAAkC,UAAe;AAC3E,QAAM,QAAQ,mBAAmB,OAAO;AAExC,MAAI,aAAa,QAAW;AAC1B,UAAM,UAAU;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAOO,SAAS,aAAa,SAAuC;AAClE,QAAM,QAAQ,mBAAmB,OAAO;AAExC,QAAM,EAAE,UAAU,IAAI,MAAM,KAAK;AACjC,SAAO;AACT;AAEO,SAAS,eAAe,SAAuC;AACpE,QAAM,QAAQ,mBAAmB,OAAO;AAExC,QAAM,EAAE,YAAY,IAAI,MAAM,YAAY;AAC1C,SAAO;AACT;AAEO,SAAS,YAAY,SAAuC;AACjE,QAAM,QAAQ,mBAAmB,OAAO;AAExC,QAAM,EAAE,SAAS,IAAI,MAAM,SAAS;AACpC,SAAO;AACT;AAOO,SAAS,mBAAmB,SAAkC;AACnE,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,WAAS,OAAO;AACd,WAAO;AAAA,MACL,WAAW,QAAQ,YAAY,IAAI,WAAW;AAAA,IAChD;AAAA,EACF;AAEA,WAAS,cAAc;AACrB,QAAI,cAAe,QAAQ,YAAY,IAAI,aAAa;AACxD,QAAG,eAAe,QAAU;AAC1B,oBAAc,CAAC;AAAA,IACjB;AACA,WAAO;AAAA,MACL;AAAA,IACF;AAAA,EACF;AAEA,WAAS,WAAW;AAClB,QAAI,WAAY,QAAQ,YAAY,IAAI,UAAU;AAClD,QAAG,YAAY,QAAU;AACvB,iBAAW,CAAC;AAAA,IACd;AACA,WAAO;AAAA,MACL;AAAA,IACF;AAAA,EACF;AAEA,WAAS,MAAM,UAAe;AAC5B,YAAQ,YAAY,OAAO,aAAa,SAAS,SAAS;AAAA,EAC5D;AAEA,WAAS,UAAU,UAAe;AAChC,YAAQ,YAAY,OAAO,YAAY,SAAS,QAAQ;AAAA,EAC1D;AAEA,WAAS,aAAa,UAAe;AACnC,YAAQ,YAAY,OAAO,eAAe,SAAS,WAAW;AAAA,EAChE;AACF;",
  "names": []
}
