{
  "version": 3,
  "sources": ["../../src/tags/commands.ts"],
  "sourcesContent": ["'use strict';\n\nimport * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { TagsController } from '../utilities/tagsController';\n\nexport class Commands {\n    private controller: TagsController;\n\n    constructor(controller: TagsController) {\n        this.controller = controller;\n    }\n\n    refresh(): void {\n        Object.keys(this.controller.tags).forEach((uri) => {\n            vscode.workspace.openTextDocument(vscode.Uri.parse(uri)).then((document) => {\n                this.controller.updateTags(document);\n            });\n        });\n    }\n\n    showSelectTag(filter?: (resource: string) => boolean, placeHolder?: string): void {\n        const entries: CustomEntry[] = [];\n\n        Object.keys(this.controller.tags).forEach((uri) => {\n            const resource = vscode.Uri.parse(uri).fsPath;\n            const fname = path.parse(resource).base;\n\n            if (filter && !filter(resource)) {\n                return;\n            }\n\n            Object.keys(this.controller.tags[uri]).forEach((cat) => {\n                this.controller.tags[uri][cat].forEach((b) => {\n                    entries.push({\n                        label: b.text,\n                        description: fname,\n                        target: new vscode.Location(vscode.Uri.file(resource), b.range),\n                    });\n                });\n            });\n        });\n\n        vscode.window\n            .showQuickPick(entries, { placeHolder: placeHolder || 'Select tags' })\n            .then((item) => {\n                if (item && (item as any).target) {\n                    vscode.commands.executeCommand(\n                        'instructions.jumpToRange',\n                        (item as any).target.uri,\n                        (item as any).target.range\n                    );\n                }\n            });\n    }\n\n    showSelectVisibleTag(): void {\n        const visibleEditorUris = vscode.window.visibleTextEditors.map((te) => te.document.uri.fsPath);\n        this.showSelectTag((resFsPath) => visibleEditorUris.includes(resFsPath), 'Select visible tags');\n    }\n\n    showListTags(filter?: (resource: string) => boolean): void {\n        if (!vscode.window.createOutputChannel) return;\n\n        const outputChannel = vscode.window.createOutputChannel('instructions');\n        outputChannel.clear();\n\n        const entries: { label: string; description: string; target: vscode.Location }[] = [];\n\n        Object.keys(this.controller.tags).forEach((uri) => {\n            const resource = vscode.Uri.parse(uri).fsPath;\n            const fname = path.parse(resource).base;\n\n            if (filter && !filter(resource)) {\n                return;\n            }\n\n            Object.keys(this.controller.tags[uri]).forEach((cat) => {\n                this.controller.tags[uri][cat].forEach((b) => {\n                    entries.push({\n                        label: b.text,\n                        description: fname,\n                        target: new vscode.Location(vscode.Uri.file(resource), b.range),\n                    });\n                });\n            });\n        });\n\n        if (entries.length === 0) {\n            vscode.window.showInformationMessage('No results');\n            return;\n        }\n\n        entries.forEach((v, i) => {\n            const patternA = `#${i + 1}\\t${v.target.uri}#${v.target.range.start.line + 1}`;\n            const patternB = `#${i + 1}\\t${v.target.uri}:${v.target.range.start.line + 1}:${v.target.range.start.character + 1}`;\n            const patternType = os.platform() === 'linux' ? 1 : 0;\n\n            outputChannel.appendLine([patternA, patternB][patternType]);\n            outputChannel.appendLine(`\\t${v.label}\\n`);\n        });\n\n        outputChannel.show();\n    }\n\n    showListVisibleTags(): void {\n        const visibleEditorUris = vscode.window.visibleTextEditors.map((te) => te.document.uri.fsPath);\n        this.showListTags((resFsPath) => visibleEditorUris.includes(resFsPath));\n    }\n\n    scanWorkspaceTags(): void {\n        vscode.workspace\n            .findFiles(this.controller.includePattern, this.controller.excludePattern, this.controller.maxFilesLimit)\n            .then(\n                (files) => {\n                    if (!files || files.length === 0) {\n                        console.log('No files found');\n                        return;\n                    }\n\n                    function isTextFile(filePath: string): boolean {\n                        const buffer = fs.readFileSync(filePath, { encoding: null, flag: 'r' });\n                        const textChars = buffer.toString('utf8').split('').filter(char => {\n                            const code = char.charCodeAt(0);\n                            return (code >= 32 && code <= 126) || code === 9 || code === 10 || code === 13;\n                        });\n\n                        return textChars.length / buffer.length > 0.9; // Adjust the threshold as needed\n                    }\n\n                    files.forEach((file) => {\n                        if (isTextFile(file.fsPath)) {\n                            vscode.workspace.openTextDocument(file).then(\n                                (document) => {\n                                    this.controller.updateTags(document);\n                                },\n                                (err) => console.error(err)\n                            );\n                        }\n                    });\n                },\n                (err) => console.error(err)\n            );\n    }\n}\n\ninterface CustomEntry {\n    label: string;\n    description: string;\n    target: vscode.Location;\n}"],
  "mappings": "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",
  "names": []
}
